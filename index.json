[{"categories":["开发工具"],"content":"基础结构 用户连接 connection 数据库 database 表格 table 视图 view 等等 ","date":"2022-02-22","objectID":"/mysql_learning/:1:0","tags":["SQL","mysql","navicat"],"title":"Mysql学习1-基础命令行操作","uri":"/mysql_learning/"},{"categories":["开发工具"],"content":"连接数据库 navicat 双击数据库，创建连接 命令行连接 mysql -uroot -pWby785403310 修改密码 updatemysql.usersetauthentication_string=password('123456')whereuser='root'andHost='localhost'; 刷新权限 flushprivileges; ","date":"2022-02-22","objectID":"/mysql_learning/:2:0","tags":["SQL","mysql","navicat"],"title":"Mysql学习1-基础命令行操作","uri":"/mysql_learning/"},{"categories":["开发工具"],"content":"常用基础命令 查看所有数据库 showdatabases; 使用数据库 use + database名称 usemysql; 查看所有table showtables; 查看指定表结构 describeuser; 创建一个数据库 createdatabasewestos; 退出连接和注视 exit;--退出连接 --单行注释 /* sql 多行注释 */ ","date":"2022-02-22","objectID":"/mysql_learning/:3:0","tags":["SQL","mysql","navicat"],"title":"Mysql学习1-基础命令行操作","uri":"/mysql_learning/"},{"categories":["开发工具"],"content":"mysql 语言种类 CRUD 增删改查 DDL database define language DML database manipulate language DQL database query language DCL database control language CV 程序员 API 程序员 CRUD 程序员（业务） ","date":"2022-02-22","objectID":"/mysql_learning/:4:0","tags":["SQL","mysql","navicat"],"title":"Mysql学习1-基础命令行操作","uri":"/mysql_learning/"},{"categories":["开发工具"],"content":"操作数据库 操作数据库\u003e操作数据库中的表\u003e操作数据库中的表数据 关键字不区分大小写 ","date":"2022-02-22","objectID":"/mysql_learning/:5:0","tags":["SQL","mysql","navicat"],"title":"Mysql学习1-基础命令行操作","uri":"/mysql_learning/"},{"categories":["开发工具"],"content":"操作数据库 （了解） 创建数据库 CREATE DATABASE IF NOT EXISTS westos; 删除数据库 DROP DATABASE IF EXISTS hello; 使用数据库 use `school` (如果表明和字段名是一个保留字，应该加上反引号) 查看数据库 show databases ","date":"2022-02-22","objectID":"/mysql_learning/:5:1","tags":["SQL","mysql","navicat"],"title":"Mysql学习1-基础命令行操作","uri":"/mysql_learning/"},{"categories":["开发工具"],"content":"数据库的数据（列）类型 1 数值 tinyint 十分小的数据 1个字节 smallint 较小的数据 2个字节 mediumint 中等大小 3个字节 int 标准的整数 4个字节 bigint 较大的数据 8个字节 float 单精度 4个字节 double 双精度 8个字节（精度问题） decimal 字符串形式的浮点数（金融计算，一般是decimal） 2 字符串 char 字符固定大小 0～255 varchar 可变字符串 0～65535 常用变量 tinytext 微型文本 2^8-1 text 文本类型 一般用于大型文章 3 时间日期 date YYYY-MM-DD 日期格式 time HH：mm：ss 时间格式 datetime YYYY-MM-DD HH：mm：ss 最常用的时间格式 timestamp 时间戳 1970.1.1 到现在的毫秒数 year 年份表示 4 null 没有值，未知 不要使用null进行运算 ","date":"2022-02-22","objectID":"/mysql_learning/:5:2","tags":["SQL","mysql","navicat"],"title":"Mysql学习1-基础命令行操作","uri":"/mysql_learning/"},{"categories":["开发工具"],"content":"下载Hugo ","date":"2022-02-16","objectID":"/first_post/:1:0","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"使用 brew 来安装hugo brew install hugo ","date":"2022-02-16","objectID":"/first_post/:1:1","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"新建一个hugo 项目 hugo new site mysite ","date":"2022-02-16","objectID":"/first_post/:1:2","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"hugo 项目文件结构介绍 content 博客内容 static 图片 theme 主题 ","date":"2022-02-16","objectID":"/first_post/:1:3","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"主题的配置 ","date":"2022-02-16","objectID":"/first_post/:2:0","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"主题下载 进入gohugo.io 搜索一个主题下载到项目中的theme 文件夹之中 ","date":"2022-02-16","objectID":"/first_post/:2:1","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"主题的配置 进入下载主题的说明文档 https://hugoloveit.com/zh-cn/theme-documentation-basics/ 复制基本配置，并覆盖项目根目录的config.toml 文件 ","date":"2022-02-16","objectID":"/first_post/:2:2","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"创建第一篇博客 hugo new posts/first_post.md ","date":"2022-02-16","objectID":"/first_post/:2:3","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"在本地启动网站 hugo serve --buildDrafts 这里是 –buildDrafts 指文档的草稿属性为真，就需要此参数，或者直接将对应markdown文件中的draft属性设置为false ","date":"2022-02-16","objectID":"/first_post/:2:4","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"网站高阶参数配置 复制 https://hugoloveit.com/zh-cn/theme-documentation-basics/#site-configuration 中的config.toml 文件补充到本地的对应文件当中去，注意有几个参数是重复的， ","date":"2022-02-16","objectID":"/first_post/:2:5","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"部署到github.io 服务器 ","date":"2022-02-16","objectID":"/first_post/:3:0","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"github仓库新建 新建一个项目，名字为： github账号名.github.io ","date":"2022-02-16","objectID":"/first_post/:3:1","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"本地对接远程服务器地址 hugo –theme=LoveIt –baseUrl=“https://swaggerwei.github.io/\" -D 可以发现本地生成了一个public文件夹 命令 cd public git init git add . git remote add origin git@github.com:SwaggerWei/SwaggerWei.github.io.git git push -u origin master tips: init 和 remote add 操作后续更改博客不需要 ","date":"2022-02-16","objectID":"/first_post/:3:2","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"网页进入个人主页 swaggerwei.github.io tips：一般过五分钟才行 ","date":"2022-02-16","objectID":"/first_post/:3:3","tags":["hugo"],"title":"Hugo 使用教程","uri":"/first_post/"},{"categories":["开发工具"],"content":"团队协作分支开发模式 一个好的 github 项目一般都有多个分支：master，dev，release分支 新建分支 branch git branch branch1 切换到目标分支 git checkout branch1 在本地的branch1 中添加一个helloworld.java 文件 public class HelloWorld { public static void main(String[] args) { System.out.println(\"hello world\"); System.out.println(\"1\"); System.out.println(\"hello world\"); System.out.println(\"2\"); } } 推送到远端 git push --set-upstream origin branch1 然后远端就有了master 和 branch1 两个分支了， 其中branch1 中才有 java文件 同理，在另一个人的主机上， 创建branch2， 并写自己的HelloWorld.java文件 public class HelloWorld { public static void main(String[] args) { System.out.println(\"1\"); System.out.println(\"hello world\"); System.out.println(\"2\"); System.out.println(\"hello world\"); } } 分支的合并发布 首先切换到master分支 git checkout master 拉一下最新的远端分支情况 git pull 将branch1 分支的内容合并到master 分支上 git merge brunch1 推到远端 git push 发现master 分支 也有branch1 中的java文件了 同理合并 branch2 到 master上， 但是发现合并有冲突， 因为有两个同名的Java 文件， 但是文件内容却不一样 ","date":"2022-01-30","objectID":"/git_learning3/:1:0","tags":["git","github","gitee"],"title":"git 代码管理工具3","uri":"/git_learning3/"},{"categories":["开发工具"],"content":"使用IDEA 快速解决 git merge 当中的冲突 右键， 选择git-》resolve conflict 双击出现的 conflict 进行代码比对 手动比对之后出现 all changes have been processed 就可以了， 点击右下角apply 然后上传到远端没有出现错误则说明成功 ","date":"2022-01-30","objectID":"/git_learning3/:2:0","tags":["git","github","gitee"],"title":"git 代码管理工具3","uri":"/git_learning3/"},{"categories":["开发工具"],"content":"如何解决冲突 模拟两个人同时修改一个文件并提交到远端 克隆到两个文件夹 me 和 other git clone git@gitee.com:swagger_wei/test_gitee_git.git me git clone git@gitee.com:swagger_wei/test_gitee_git.git other other 对first.txt 内容作出修改 推送到远端 此时另一个 me 的本地仓库是不知道远程的仓库已经发生了修改的 me 对first.txt 内容作出修改 推送到远端 发现出错，因为本地 me 仓库 不知道远端仓库已经发生了变换， 所以向远端提交失败 拉取远端变化 git pull 发现有pull之后有冲突需要解决 商量之后删掉无用部分， 合并冲突 提交到远端 发现远端已经提交成功 ","date":"2022-01-27","objectID":"/git_learning2/:1:0","tags":["git","github","gitee"],"title":"git 代码管理工具2","uri":"/git_learning2/"},{"categories":["开发工具"],"content":"应用场景 团队协作开发， 避免频繁来回拷贝代码 ","date":"2022-01-17","objectID":"/git_learning/:1:0","tags":["git","github","gitee"],"title":"git 代码管理工具1","uri":"/git_learning/"},{"categories":["开发工具"],"content":"git 工作流程 克隆 Git 资源作为工作目录 在本地的工作副本上做修改操作 如果别人更改了资源可以更新资源 检查修改之后就可以向资源库推送更新 如果发现有错误则可以撤销推送，修改错误，然后重新推送 ","date":"2022-01-17","objectID":"/git_learning/:2:0","tags":["git","github","gitee"],"title":"git 代码管理工具1","uri":"/git_learning/"},{"categories":["开发工具"],"content":"工作区和、暂存区和版本库 工作区，就是本地电脑上可以看到的文件(按下Command+Shift+. 可以显示隐藏文件、文件夹，再按一次，恢复隐藏；) 暂存区，英文stage或者index，一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index） 版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。 ","date":"2022-01-17","objectID":"/git_learning/:3:0","tags":["git","github","gitee"],"title":"git 代码管理工具1","uri":"/git_learning/"},{"categories":["开发工具"],"content":"基本操作命令 当前基本状态 git status 显示当前的最新的branch； 显示没有被commit的 文件（发现.DS_Store和first文件没有被commit） 添加到暂存区 git add 文件名 .为所有文件，再次运行git status，发现所有的文件都已经被添加 添加到版本库 git commit -m \"版本提交的附带信息\" 查看当前的提交和回滚情况 git log 注：为倒叙排序， Initial commit 为默认初始化github 官网创建得到 回滚最新的一次commit git reset commit后跟的ID 回滚之前发现有一个message 为 second commit 的 commit 回滚的ID 填入倒数第二个ID， 说明回滚到倒数第二新的状态 设置邮箱号 git config --global user.email 785403310@qq.com 设置名字 git config --global user.name swagger 然后发现log 信息中的commit 信息变成了自己 推送到github服务器 git push 推送之后发现本地创建的文件已经同步到了gitee上 ","date":"2022-01-17","objectID":"/git_learning/:4:0","tags":["git","github","gitee"],"title":"git 代码管理工具1","uri":"/git_learning/"},{"categories":["刷题学习"],"content":"树 和 图 辨析 树的父节点和子节点之间是一条路单向可达 图的的节点之间存在多条路可达 ","date":"2021-11-24","objectID":"/lc_learning9/:1:0","tags":["算法"],"title":"刷题学习9-java 图 知识点graph","uri":"/lc_learning9/"},{"categories":["刷题学习"],"content":"基本概念 顶点 边 邻居节点：只有一条边连接的顶点 度（degree）：一个顶点有几条边，就有几度 ","date":"2021-11-24","objectID":"/lc_learning9/:2:0","tags":["算法"],"title":"刷题学习9-java 图 知识点graph","uri":"/lc_learning9/"},{"categories":["刷题学习"],"content":"图的区分 无向图：边没有方向 有向图 权重图 ","date":"2021-11-24","objectID":"/lc_learning9/:3:0","tags":["算法"],"title":"刷题学习9-java 图 知识点graph","uri":"/lc_learning9/"},{"categories":["刷题学习"],"content":"有向图的基本概念 入度：多少条边指向该顶点 出度：多少条边从这个顶点出发指向其他顶点 ","date":"2021-11-24","objectID":"/lc_learning9/:4:0","tags":["算法"],"title":"刷题学习9-java 图 知识点graph","uri":"/lc_learning9/"},{"categories":["刷题学习"],"content":"EG： 韩：入度为0；出度为2 李：入度为1；出度为1 bishi：入度为2；出度为0 饲：入度为1；出度为1 ","date":"2021-11-24","objectID":"/lc_learning9/:4:1","tags":["算法"],"title":"刷题学习9-java 图 知识点graph","uri":"/lc_learning9/"},{"categories":["刷题学习"],"content":"权重图的基本概念 边上有权重 EG：顶点为城市，边为城市之间的距离，最短路径问题 ","date":"2021-11-24","objectID":"/lc_learning9/:5:0","tags":["算法"],"title":"刷题学习9-java 图 知识点graph","uri":"/lc_learning9/"},{"categories":["刷题学习"],"content":"最短路径常用算法 贝尔曼-福特算法（Bellman Ford） 狄杰斯特拉算法（Dijkstra） DFS BFS ","date":"2021-11-24","objectID":"/lc_learning9/:6:0","tags":["算法"],"title":"刷题学习9-java 图 知识点graph","uri":"/lc_learning9/"},{"categories":["ROS 学习"],"content":"使用github安装 网址：http://www.uco.es/investiga/grupos/ava/node/26 git clone到本地之后，catkin make即可开始使用 ","date":"2021-11-20","objectID":"/aruco_learning/:1:0","tags":["ROS","抓取"],"title":"Aruco配合realsense 使用","uri":"/aruco_learning/"},{"categories":["ROS 学习"],"content":"使用apt安装 sudo apt-get install ros-kinetic-aruco-ros sudo apt-get install ros-kinetic-aruco-msgs sudo apt-get install ros-kinetic-aruco-detect sudo apt-get install ros-kinetic-aruco ","date":"2021-11-20","objectID":"/aruco_learning/:2:0","tags":["ROS","抓取"],"title":"Aruco配合realsense 使用","uri":"/aruco_learning/"},{"categories":["ROS 学习"],"content":"测试使用 roslaunch aruco_ros single.launch 如果没有报错，说明成功 ","date":"2021-11-20","objectID":"/aruco_learning/:3:0","tags":["ROS","抓取"],"title":"Aruco配合realsense 使用","uri":"/aruco_learning/"},{"categories":["ROS 学习"],"content":"网址生成二维码，及其相关信息 http://chev.me/arucogen/ 图片的风格类型 marker ID —–582 尺寸大小（注意这里的单位为mm）—-34mm ","date":"2021-11-20","objectID":"/aruco_learning/:4:0","tags":["ROS","抓取"],"title":"Aruco配合realsense 使用","uri":"/aruco_learning/"},{"categories":["ROS 学习"],"content":"修改launch文件夹中的single.launch文件 更改camera_info为realsense发布的相机内参话题 \u003cremap from=\"/camera_info\" to=\"/camera/color/camera_info\" /\u003e 更改image \u003cremap from=\"/image\" to=\"/camera/color/image_raw\" /\u003e 更改camera_frame \u003cparam name=\"camera_frame\" value=\"/camera_link\"/\u003e 更改Marker ID; marker size \u003carg name=\"markerId\" default=\"582\"/\u003e \u003carg name=\"markerSize\" default=\"0.034\"/\u003e \u003c!-- in m --\u003e ","date":"2021-11-20","objectID":"/aruco_learning/:5:0","tags":["ROS","抓取"],"title":"Aruco配合realsense 使用","uri":"/aruco_learning/"},{"categories":["ROS 学习"],"content":"开始测试 启动realsense节点 roslaunch realsense2_camera rs_camera.launch 启动single.launch 文件 roslaunch aruco_ros single.launch 使用image_view观察识别效果 rosrun image_view image_view image:=/aruco_single/result 查看位姿 rostopic echo /aruco_single/pose 参考：https://blog.csdn.net/qq_34935373/article/details/105098244 ","date":"2021-11-20","objectID":"/aruco_learning/:6:0","tags":["ROS","抓取"],"title":"Aruco配合realsense 使用","uri":"/aruco_learning/"},{"categories":["pointNetGPD"],"content":"资源相关 项目地址 源码地址 论文地址 ","date":"2021-11-18","objectID":"/pointnetgpd_reading/:1:0","tags":["抓取","pointNet"],"title":"1-PointNetGPD论文阅读","uri":"/pointnetgpd_reading/"},{"categories":["pointNetGPD"],"content":"输入输出 input： 点云数据 output： 抓取位姿（6D）(parallel-jaw)方式 ","date":"2021-11-18","objectID":"/pointnetgpd_reading/:2:0","tags":["抓取","pointNet"],"title":"1-PointNetGPD论文阅读","uri":"/pointnetgpd_reading/"},{"categories":["pointNetGPD"],"content":"contribution 网络轻量化 预测夹爪的6D位姿 贡献一个真实的点云抓取数据集 网络模型可以准确的分析出夹爪和抓取物体的几何信息，在点云数据很粗糙的情况下准确度也有保证 ","date":"2021-11-18","objectID":"/pointnetgpd_reading/:3:0","tags":["抓取","pointNet"],"title":"1-PointNetGPD论文阅读","uri":"/pointnetgpd_reading/"},{"categories":["pointNetGPD"],"content":"motivation 现如今的抓取预测方式都是依据RGB和Depth 结合的方式，很少考虑几何信息 PointNet 直接在点云做分割和分类的效果非常好 ","date":"2021-11-18","objectID":"/pointnetgpd_reading/:4:0","tags":["抓取","pointNet"],"title":"1-PointNetGPD论文阅读","uri":"/pointnetgpd_reading/"},{"categories":["pointNetGPD"],"content":"pipeline ","date":"2021-11-18","objectID":"/pointnetgpd_reading/:5:0","tags":["抓取","pointNet"],"title":"1-PointNetGPD论文阅读","uri":"/pointnetgpd_reading/"},{"categories":["pointNetGPD"],"content":"抓取实验评价指标 Meticulous grasp quality scores 包括如下两部分 force-closure GWS analysis ","date":"2021-11-18","objectID":"/pointnetgpd_reading/:6:0","tags":["抓取","pointNet"],"title":"1-PointNetGPD论文阅读","uri":"/pointnetgpd_reading/"},{"categories":["ROS 学习"],"content":"基本概念 urdf 文件， 定义机器人的结构 用于机器人的仿真、 可视化、 tf ROS 的中包含一个urdf包，用来解析urdf文件 ","date":"2021-11-01","objectID":"/ros_learning6/:1:0","tags":["ROS"],"title":"6-URDF","uri":"/ros_learning6/"},{"categories":["ROS 学习"],"content":"描述机器人零部件和零部件之间的关系 link 每个零部件都有自己的link（xyz三个轴） joint 描述两个零部件连接的关节 urdf文件中定义两个link 之间必有一个joint ","date":"2021-11-01","objectID":"/ros_learning6/:2:0","tags":["ROS"],"title":"6-URDF","uri":"/ros_learning6/"},{"categories":["ROS 学习"],"content":"urdf 文件的具体撰写 ","date":"2021-11-01","objectID":"/ros_learning6/:3:0","tags":["ROS"],"title":"6-URDF","uri":"/ros_learning6/"},{"categories":["ROS 学习"],"content":"tf in python 的相关数据类型 tuple list numpy array 四种方式通用 EG： ","date":"2021-11-01","objectID":"/ros_learning5/:1:0","tags":["ROS"],"title":"5-tf in python ","uri":"/ros_learning5/"},{"categories":["ROS 学习"],"content":"四元数、矩阵、欧拉角之间的转换 ","date":"2021-11-01","objectID":"/ros_learning5/:2:0","tags":["ROS"],"title":"5-tf in python ","uri":"/ros_learning5/"},{"categories":["ROS 学习"],"content":"tf.TransformListener 类 构造函数为无参数 tips：查看相对的tf，方法中注意时间要填写为time(0), 不能使用time(now)获取当前时间，因为获取当前的tf消息是空的，需要等待一下才有消息 ","date":"2021-11-01","objectID":"/ros_learning5/:3:0","tags":["ROS"],"title":"5-tf in python ","uri":"/ros_learning5/"},{"categories":["ROS 学习"],"content":"tf.transformBroadcaster 类 构造函数为无参数 ","date":"2021-11-01","objectID":"/ros_learning5/:4:0","tags":["ROS"],"title":"5-tf in python ","uri":"/ros_learning5/"},{"categories":["ROS 学习"],"content":"tf相关指令 根据当前的tf tree 绘制一个PDF图: 接收/tf 消息五秒，然后生成一个树图 rosrun tf view_frames 查看当前的tf tree： 动态显示 rosrun rqt_tf_tree rqt_tf_tree 查看两个frame 之间的变化关系 rosrun tf tf_echo [reference_frame] [target_frame] ","date":"2021-11-01","objectID":"/ros_learning5/:5:0","tags":["ROS"],"title":"5-tf in python ","uri":"/ros_learning5/"},{"categories":["ROS 学习"],"content":"TransFrom 坐标变换（位置+姿态） 坐标系数据的维护工具 ","date":"2021-11-01","objectID":"/ros_learning4/:1:0","tags":["ROS"],"title":"4-tf介绍","uri":"/ros_learning4/"},{"categories":["ROS 学习"],"content":"抓取场景下的坐标转换 涉及的坐标系：基坐标系、摄像头坐标系、机械臂末端坐标系 物体坐标相对于摄像头坐标系-》物体坐标相对于基坐标系 物体坐标相对于夹爪末端坐标系 ","date":"2021-11-01","objectID":"/ros_learning4/:2:0","tags":["ROS"],"title":"4-tf介绍","uri":"/ros_learning4/"},{"categories":["ROS 学习"],"content":"ROS中的tf 一个部件是一个link， 会发布自己的tf消息 与之相连的link， 会接收其tf消息完成连接转化工作（joint工作） ROS中tf表示的意思：标准 话题 工具 接口 ","date":"2021-11-01","objectID":"/ros_learning4/:3:0","tags":["ROS"],"title":"4-tf介绍","uri":"/ros_learning4/"},{"categories":["ROS 学习"],"content":"tf消息格式 ","date":"2021-11-01","objectID":"/ros_learning4/:4:0","tags":["ROS"],"title":"4-tf介绍","uri":"/ros_learning4/"},{"categories":["ROS 学习"],"content":"两个frame之间的tf变化 TransformedStamped.msg seq-序号 stamp-时间戳 frame_id-本frame的id child_frame_id-子frame的id 位置 旋转位姿 很多个节点向/tf 话题发送消息， 形成tf树 ","date":"2021-11-01","objectID":"/ros_learning4/:4:1","tags":["ROS"],"title":"4-tf介绍","uri":"/ros_learning4/"},{"categories":["ROS 学习"],"content":"Client Library 提供ROS编程的库 例如建立node，发布消息，调用服务 提供了如下几种client library ：roscpp、rospy、roslisp ","date":"2021-11-01","objectID":"/ros_learning3/:1:0","tags":["ROS"],"title":"3-roscpp介绍","uri":"/ros_learning3/"},{"categories":["ROS 学习"],"content":"rospy的组成 Node Topic Service Param Time ","date":"2021-11-01","objectID":"/ros_learning3/:2:0","tags":["ROS"],"title":"3-roscpp介绍","uri":"/ros_learning3/"},{"categories":["ROS 学习"],"content":"rospy-Node 相关 ","date":"2021-11-01","objectID":"/ros_learning3/:3:0","tags":["ROS"],"title":"3-roscpp介绍","uri":"/ros_learning3/"},{"categories":["ROS 学习"],"content":"rospy-topic 相关 wait_for_message: 只接收一次消息，不是一直处理消息 publisher-》init: 当中的queue_size, 设置为1， 为异步通信方式， None为同步通信方式 ","date":"2021-11-01","objectID":"/ros_learning3/:4:0","tags":["ROS"],"title":"3-roscpp介绍","uri":"/ros_learning3/"},{"categories":["ROS 学习"],"content":"topic_demo ","date":"2021-11-01","objectID":"/ros_learning3/:5:0","tags":["ROS"],"title":"3-roscpp介绍","uri":"/ros_learning3/"},{"categories":["ROS 学习"],"content":"功能描述： 两个node，一个发布模拟的GPS消息（格式为自定义，包括坐标和工作状态） 另一个node接收并处理该信息（计算到原点的距离） ","date":"2021-11-01","objectID":"/ros_learning3/:5:1","tags":["ROS"],"title":"3-roscpp介绍","uri":"/ros_learning3/"},{"categories":["ROS 学习"],"content":"步骤 建立一个package cd ~/catkin_ws/src catkin_create_pkg topic_demo roscpp rospy std_msg 定义自己的msg文件 cd topic_demo/ mkdir msg cd msg gedit gps.msg 文件内容如下 编写talker.py 编写listener.py 修改CmakeList.txt; package.xml文件 最后执行catkin_make，编译完成之后会在如下路径下生成gps的头文件 使用rosrun运行talker.py和listener.py文件 ","date":"2021-11-01","objectID":"/ros_learning3/:5:2","tags":["ROS"],"title":"3-roscpp介绍","uri":"/ros_learning3/"},{"categories":["ROS 学习"],"content":"ROS常用工具 仿真：Gazebo 调试、可视化：Rviz、rqt 命令行工具：rostopic、roslaunch、rosbag 专用工具：Moveit ","date":"2021-10-28","objectID":"/ros_learning2/:1:0","tags":["ROS"],"title":"2-ROS常用工具","uri":"/ros_learning2/"},{"categories":["ROS 学习"],"content":"Gazebo 机器人仿真工具 ODE、Bullet 等物理引擎 动力学、导航、感知等任务的模拟 ","date":"2021-10-28","objectID":"/ros_learning2/:2:0","tags":["ROS"],"title":"2-ROS常用工具","uri":"/ros_learning2/"},{"categories":["ROS 学习"],"content":"Gazebo 操作 鼠标左键平移， 中键旋转 左侧world：各类物理模型及其属性 左侧insert：可以插入各种模型 ","date":"2021-10-28","objectID":"/ros_learning2/:3:0","tags":["ROS"],"title":"2-ROS常用工具","uri":"/ros_learning2/"},{"categories":["ROS 学习"],"content":"RViz 方便调试和监控的工具 ADD 添加监视器（RbotModel、Laserscan、PointCloud、Camera等） 选中监视器中的topic，进行消息的接收，才能进行可视化 ","date":"2021-10-28","objectID":"/ros_learning2/:4:0","tags":["ROS"],"title":"2-ROS常用工具","uri":"/ros_learning2/"},{"categories":["ROS 学习"],"content":"rqt可视化命令行工具 rqt_graph：显示通信架构（节点和话题的发布状态） rqt_plot：绘制曲线 rqt_console：查看日志 ","date":"2021-10-28","objectID":"/ros_learning2/:5:0","tags":["ROS"],"title":"2-ROS常用工具","uri":"/ros_learning2/"},{"categories":["ROS 学习"],"content":"rosbag ROS命令行工具 记录和回放数据流 回放会将记录的消息重新发布，单独使用回放之前需要roscoe启动master节点 ","date":"2021-10-28","objectID":"/ros_learning2/:6:0","tags":["ROS"],"title":"2-ROS常用工具","uri":"/ros_learning2/"},{"categories":["ROS 学习"],"content":"通信方式 topic service parameter server actionlib ","date":"2021-10-28","objectID":"/ros_learning1/:1:0","tags":["ROS"],"title":"1-ROS通信方式","uri":"/ros_learning1/"},{"categories":["ROS 学习"],"content":"topic 通信方式 异步通信方式 Node间通过publish-subscribe的方式进行通信 topic 发布节点只管发布， 接收节点只管接收 特点 异步通信方式 对于同一个topic可以有多个发送者（例如tf，和rosout），也可以有多个接收者 ","date":"2021-10-28","objectID":"/ros_learning1/:2:0","tags":["ROS"],"title":"1-ROS通信方式","uri":"/ros_learning1/"},{"categories":["ROS 学习"],"content":"Message topic 内容的数据类型—》类 定义在.msg文件当中 包括的类型 ","date":"2021-10-28","objectID":"/ros_learning1/:3:0","tags":["ROS"],"title":"1-ROS通信方式","uri":"/ros_learning1/"},{"categories":["ROS 学习"],"content":"topic 相关命令 列出所有的topic rostopic list 显示某个topic的属性信息 rostopic info /topic_name topic内容 rostopic echo /topic_name 向某个topic发布内容 rostopic pub /topic_name ... 列出所有msg rosmsg list 显示某个msg 的内容 rosmsg show /msg_name ","date":"2021-10-28","objectID":"/ros_learning1/:4:0","tags":["ROS"],"title":"1-ROS通信方式","uri":"/ros_learning1/"},{"categories":["刷题学习"],"content":"基本定义 堆就是一种二叉树结构—完全二叉树 完全二叉树： 1 每个父节点，最多只有两个孩子 2 从上到下，从左到右依次填满 ","date":"2021-10-18","objectID":"/lc_learning8/:1:0","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"堆需要满足的条件： 是一个完全二叉树 每个节点都大于等于孩子节点（最大堆）或者每个每个节点都小于等于孩子节点（最小堆） ","date":"2021-10-18","objectID":"/lc_learning8/:2:0","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"最大堆和最小堆的辨析 根节点：堆顶元素 ","date":"2021-10-18","objectID":"/lc_learning8/:3:0","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"堆常见操作的时间复杂度 访问 Access X 搜索 Search O(1) 堆顶元素 添加 Insert O(logN) 为了满足最大堆或者最小堆的定义，需要进行父节点互换 删除 Delete O(logN) 删除堆顶元素 ","date":"2021-10-18","objectID":"/lc_learning8/:4:0","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"堆化操作的时间复杂度 堆化操作的时间复杂度是O(N)的原理 堆化：将一组无序的数加入到堆里去 堆化：将一组无序的数转化为完全二叉树，然后将完全二叉树转化为最大堆或者最小堆的操作 ","date":"2021-10-18","objectID":"/lc_learning8/:5:0","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"Eg： 有一组数：[10, 9, 7, 12, 16, 8, 5] 构建完全二叉树，结构是唯一的，只需要将数组从头到尾遍历一遍 O(N) 转化为 最小堆｜最大堆 O(N) 整体的时间复杂度为 O(N) ","date":"2021-10-18","objectID":"/lc_learning8/:5:1","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"堆的常见操作 创建堆（最大堆｜最小堆） PriorityQueue\u003cInteger\u003e minHeap = new PriorityQueue\u003c\u003e(); PriorityQueue\u003cInteger\u003e maxHeap = new PriorityQueue\u003c\u003e(Collections.reverseOrder()); 添加元素 minHeap.add(10); minHeap.add(8); minHeap.add(9); minHeap.add(11); minHeap.add(2); maxHeap.add(10); maxHeap.add(8); maxHeap.add(9); maxHeap.add(11); maxHeap.add(2); 获取堆顶元素 System.out.println(minHeap.peek()); System.out.println(maxHeap.peek()); 读取堆顶元素并出堆 minHeap.poll(); System.out.println(minHeap.toString()); maxHeap.poll(); System.out.println(maxHeap.toString()); 堆的长度 System.out.println(minHeap.size()); System.out.println(maxHeap.size()); 堆的遍历 while (!minHeap.isEmpty()){ minHeap.poll(); System.out.println(minHeap.toString()); } while (!maxHeap.isEmpty()){ maxHeap.poll(); System.out.println(maxHeap.toString()); } ","date":"2021-10-18","objectID":"/lc_learning8/:6:0","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"leetcode练习题 215 数组中第k个最大元素 kth largest element in a array 692 前k个高频单词 top k frequent words ","date":"2021-10-18","objectID":"/lc_learning8/:7:0","tags":["算法"],"title":"刷题学习8-java 堆 知识点Heap","uri":"/lc_learning8/"},{"categories":["刷题学习"],"content":"树的基本概念 描述的是节点之间的父子关系 tips： 成环的结构不可能成为树， 因为无法确定父子关系 ","date":"2021-10-16","objectID":"/lc_learning7/:1:0","tags":["算法"],"title":"刷题学习7-java 树知识点Tree","uri":"/lc_learning7/"},{"categories":["刷题学习"],"content":"重要的名词 节点 根节点（开始的节点，没有父节点，具有唯一性） 叶子节点（没有孩子的节点） ","date":"2021-10-16","objectID":"/lc_learning7/:2:0","tags":["算法"],"title":"刷题学习7-java 树知识点Tree","uri":"/lc_learning7/"},{"categories":["刷题学习"],"content":"高度、深度、层 概念辨析 高度：从叶子向根看，从0开始计数 深度：从根向叶子看，从0开始计数 层： 从根向叶子看，从1开始计数 ","date":"2021-10-16","objectID":"/lc_learning7/:3:0","tags":["算法"],"title":"刷题学习7-java 树知识点Tree","uri":"/lc_learning7/"},{"categories":["刷题学习"],"content":"二叉树 普通二叉树：每个节点最多两个孩子 满二叉树：除了叶子节点，每个节点都有左右两个孩子，且所有的叶子节点都在同一层 完全二叉树：从树的根节点，从上到下，从左到右，依次填满节点形成二叉树 tips：如果一个二叉树是满二叉树，那么一定是完全二叉树，反过来不一定 ","date":"2021-10-16","objectID":"/lc_learning7/:4:0","tags":["算法"],"title":"刷题学习7-java 树知识点Tree","uri":"/lc_learning7/"},{"categories":["刷题学习"],"content":"遍历 前序遍历： 根节点、左子树、右子树 中序遍历： 左子树、根节点、右子树 后序遍历： 左子树、右子树，根节点 EG: 前序遍历：A B D E C F G 中序遍历：D B E A F C G 后序遍历：D E B F G C A ","date":"2021-10-16","objectID":"/lc_learning7/:5:0","tags":["算法"],"title":"刷题学习7-java 树知识点Tree","uri":"/lc_learning7/"},{"categories":["刷题学习"],"content":"leetcode 练习题 144 Binary Tree Preorder Traversal 前序遍历 94 Binary Tree Inorder Traversal 中序遍历 145 Binary Tree Postorder Traversal 后序遍历 ","date":"2021-10-16","objectID":"/lc_learning7/:6:0","tags":["算法"],"title":"刷题学习7-java 树知识点Tree","uri":"/lc_learning7/"},{"categories":["kinova"],"content":"我的环境 ubuntu 16.04 64bits ROS Kinetic ","date":"2021-10-14","objectID":"/kinova_ros/:1:0","tags":["ROS","kinova"],"title":"4-Kinova_ros 配置文档","uri":"/kinova_ros/"},{"categories":["kinova"],"content":"Kinova SDK 下载 进入kinova官网 kinovarobotics.com 找到右上角resource， 根据自己kinova机械臂的名称找到对应的资源库，我的是Gen2 选择对应自由度的机械臂，然后找到SDK下载 ","date":"2021-10-14","objectID":"/kinova_ros/:2:0","tags":["ROS","kinova"],"title":"4-Kinova_ros 配置文档","uri":"/kinova_ros/"},{"categories":["kinova"],"content":"Kinova SDK 安装 解压SDK, 切换到目录中 打开终端 cd Ubuntu/16_04/64\\ bits/ 使用.sh文件安装 sudo bash installSDK64.sh 一直下一步即可，　一般是默认安装在opt目录下 ","date":"2021-10-14","objectID":"/kinova_ros/:3:0","tags":["ROS","kinova"],"title":"4-Kinova_ros 配置文档","uri":"/kinova_ros/"},{"categories":["kinova"],"content":"SDK DevelopmentCenter GUI 简单使用 切换到安装目录下 cd /opt/JACO-SDK/GUI/ 运行GUI文件 sudo ./DevelopmentCenter.sh 右上角检测到序列号，　且使用Virtual joystick可以使用说明成功 ","date":"2021-10-14","objectID":"/kinova_ros/:4:0","tags":["ROS","kinova"],"title":"4-Kinova_ros 配置文档","uri":"/kinova_ros/"},{"categories":["kinova"],"content":"Kinova-ros 安装 创建工作空间 mkdir \"~/catkin_ws/src/\" 切换到工作空间 cd ~/catkin_ws/src/ 下载 git clone https://github.com/Kinovarobotics/kinova-ros.git kinova-ros 可以导入到gitee 再下载 编译 cd ~/catkin_ws/ catkin_make 更改bashrc文件 source ~/catkin_ws/devel/setup.bash 此句话加入到bashrc中 ","date":"2021-10-14","objectID":"/kinova_ros/:5:0","tags":["ROS","kinova"],"title":"4-Kinova_ros 配置文档","uri":"/kinova_ros/"},{"categories":["kinova"],"content":"机器人唤醒 TIPS： 注意ROS节点和Development Center不能一起打开 source source devel/setup.bash bringup机械臂 roslaunch kinova_bringup kinova_robot.launch kinova_robotType:=j2n7s300 ","date":"2021-10-14","objectID":"/kinova_jaco2_7dof/:1:0","tags":["ROS","kinova"],"title":"3-kinova jaco2 7dof 机械臂基础控制","uri":"/kinova_jaco2_7dof/"},{"categories":["kinova"],"content":"cartesian 控制模式 重新起一个终端 cd ~/catkin_ws source devel/setup.bash 运行pose_action_client.py 文件 tips： pose参数解释，机器人方向看手 a.非相对（指定6D位置）移动， 不带-r参数 （小）左（大）右 （小）高（大）低 （大）前（小）后 rosrun kinova_demo pose_action_client.py -v j2n7s300 mdeg -- -0.193846275806 -0.265829235315 0.505497992039 94.2 -43.2 -167.1 rosrun kinova_demo pose_action_client.py -v j2n7s300 mdeg -- -0.193846275806 -0.265829235315 0.705497992039 94.2 -43.2 -167.1 rosrun kinova_demo pose_action_client.py -v j2n7s300 mdeg -- -0.193846275806 -0.465829235315 0.505497992039 94.2 -43.2 -167.1 rosrun kinova_demo pose_action_client.py -v j2n7s300 mdeg -- -0.393846275806 -0.265829235315 0.505497992039 94.2 -43.2 -167.1 rosrun kinova_demo pose_action_client.py -v j2n7s300 mdeg -- -0.193846275806 -0.265829235315 0.705497992039 94.2 -43.2 -167.1 b.相对（在当前6D位置基础上）移动，带-r参数 rosrun kinova_demo pose_action_client.py -v -r j2n7s300 mdeg -- 0.01 0 0 0 10 10 ","date":"2021-10-14","objectID":"/kinova_jaco2_7dof/:2:0","tags":["ROS","kinova"],"title":"3-kinova jaco2 7dof 机械臂基础控制","uri":"/kinova_jaco2_7dof/"},{"categories":["kinova"],"content":"手指控制 参数 robotType： j2n7s300 手指移动模式： percent 手指打开程度： 100 100 100（完全闭合） ； 0 0 0（完全打开） 控制命令 rosrun kinova_demo fingers_action_client.py j2n7s300 percent -- 100 100 100 rosrun kinova_demo fingers_action_client.py j2n7s300 percent -- 0 0 0 ","date":"2021-10-14","objectID":"/kinova_jaco2_7dof/:3:0","tags":["ROS","kinova"],"title":"3-kinova jaco2 7dof 机械臂基础控制","uri":"/kinova_jaco2_7dof/"},{"categories":["刷题学习"],"content":"特点 无序 不重复 注重自己独一无二的特性 ","date":"2021-10-13","objectID":"/lc_learning6/:1:0","tags":["算法"],"title":"刷题学习6-java集合Set学习","uri":"/lc_learning6/"},{"categories":["刷题学习"],"content":"主要作用 检查某一个元素是否存在 有无重复元素 ","date":"2021-10-13","objectID":"/lc_learning6/:2:0","tags":["算法"],"title":"刷题学习6-java集合Set学习","uri":"/lc_learning6/"},{"categories":["刷题学习"],"content":"Set的种类 HashSet 主要使用 LinkListSet TreeSet ","date":"2021-10-13","objectID":"/lc_learning6/:3:0","tags":["算法"],"title":"刷题学习6-java集合Set学习","uri":"/lc_learning6/"},{"categories":["刷题学习"],"content":"讲一个元素加入到HashSet过程原理 取得元素 通过哈希函数得到哈希值 通过哈希值在哈希表中寻找，如果表中没有此元素，就直接存入到哈希表中 如果有元素，然后进行对比 如果已有元素和当前元素相等，则不做操作 如果不想等，则发生哈希冲突（使用链表方法解决） ","date":"2021-10-13","objectID":"/lc_learning6/:4:0","tags":["算法"],"title":"刷题学习6-java集合Set学习","uri":"/lc_learning6/"},{"categories":["刷题学习"],"content":"哈希集合的操作的时间复杂度 访问：不存在 搜索：无哈希冲突O(1) ，有哈希冲突O(k) —k为冲突元素的个数 插入：无哈希冲突O(1) ，有哈希冲突O(k) —k为冲突元素的个数 删除：无哈希冲突O(1) ，有哈希冲突O(k) —k为冲突元素的个数 ","date":"2021-10-13","objectID":"/lc_learning6/:5:0","tags":["算法"],"title":"刷题学习6-java集合Set学习","uri":"/lc_learning6/"},{"categories":["刷题学习"],"content":"哈希集合的常用操作 创建集合 HashSet\u003cInteger\u003e set = new HashSet\u003c\u003e(); 添加元素 set.add(10); System.out.println(set.add(10)); // 检测到元素重复，添加不成功 add 会返回一个boolean值 set.add(3); set.add(5); set.add(2); set.add(2); System.out.println(set.toString()); 查询元素 System.out.println(set.contains(2)); 删除元素 set.remove(2); System.out.println(set.toString()); 长度 System.out.println(set.size()); ","date":"2021-10-13","objectID":"/lc_learning6/:6:0","tags":["算法"],"title":"刷题学习6-java集合Set学习","uri":"/lc_learning6/"},{"categories":["刷题学习"],"content":"leetcode 练习题 217 Contains Duplicate 存在重复元素 705 Design Hashset 设计哈希集合 ","date":"2021-10-13","objectID":"/lc_learning6/:7:0","tags":["算法"],"title":"刷题学习6-java集合Set学习","uri":"/lc_learning6/"},{"categories":["yoloV5"],"content":"标注方法 自己获取的数据集，人工进行标注（全人工） 自己获取的数据集，首先使用训练好的网络标注一遍，然后手动进行微调（半人工） 仿真数据集（GAN网络来生成自己的数据集– synthetic data） ","date":"2021-10-10","objectID":"/yolov5_owndatasettrain/:1:0","tags":["yoloV5","python","pytorch"],"title":"3-如何制作和训练自己的数据集（YoloV5）","uri":"/yolov5_owndatasettrain/"},{"categories":["yoloV5"],"content":"标注工具 CVAT（需要安装） makesense.ai（在线标注工具） ","date":"2021-10-10","objectID":"/yolov5_owndatasettrain/:2:0","tags":["yoloV5","python","pytorch"],"title":"3-如何制作和训练自己的数据集（YoloV5）","uri":"/yolov5_owndatasettrain/"},{"categories":["yoloV5"],"content":"makesense.ai 标注过程 输入图片 选择Object Detection 创建自己的分类 根据自己的分类开始进行标注（标注的时候也可以使用action中的load models进行半人工标注） 导出文件（action-》export annotation-》yolo format） ","date":"2021-10-10","objectID":"/yolov5_owndatasettrain/:3:0","tags":["yoloV5","python","pytorch"],"title":"3-如何制作和训练自己的数据集（YoloV5）","uri":"/yolov5_owndatasettrain/"},{"categories":["yoloV5"],"content":"文件组织过程 将images和labels分别放入对应的文件夹中 参照coco.yaml， 写自己数据集的配置 # train and val data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/]train:mydata/images/trainval:mydata/images/train# number of classesnc:3# class namesnames:['person','car','bike'] 修改train.py中的--data参数 parser.add_argument('--data', type=str, default='mydata/mydata.yaml', help='data.yaml path') 运行train.py开始训练 使用detect测试自己训练的模型 修改detect 中的权重文件为自己训练的模型（一般问train当中最新的那个exp） ","date":"2021-10-10","objectID":"/yolov5_owndatasettrain/:4:0","tags":["yoloV5","python","pytorch"],"title":"3-如何制作和训练自己的数据集（YoloV5）","uri":"/yolov5_owndatasettrain/"},{"categories":["yoloV5"],"content":"tips pycharm左侧工程目录文件个数太多了会占用大量的资源（需要检索） 可以右键文件夹，在此处选择exclude， 则可以节省资源 需要有路径的地方，只要路径正确， exclude的文件依然可以找到，知识在目录视图中找不到 ","date":"2021-10-10","objectID":"/yolov5_owndatasettrain/:5:0","tags":["yoloV5","python","pytorch"],"title":"3-如何制作和训练自己的数据集（YoloV5）","uri":"/yolov5_owndatasettrain/"},{"categories":["刷题学习"],"content":"基础定义 键值对：key：value 例如学号姓名： 1：张三 2：李四 3：王五 查找元素的方式不需要从头遍历到尾，直接通过键（key）来进行查找，时间复杂度低 ","date":"2021-10-08","objectID":"/lc_learning5/:1:0","tags":["算法"],"title":"刷题学习5-java 哈希表学习-散列表","uri":"/lc_learning5/"},{"categories":["刷题学习"],"content":"语言的使用 Java—HashMap python—-字典 ","date":"2021-10-08","objectID":"/lc_learning5/:2:0","tags":["算法"],"title":"刷题学习5-java 哈希表学习-散列表","uri":"/lc_learning5/"},{"categories":["刷题学习"],"content":"哈希查找对应元素的机制 哈希碰撞 两个不同的key通过同一个哈希函数，得到相同的内存地址 解决方式：将两个键值对使用链表串起来 ","date":"2021-10-08","objectID":"/lc_learning5/:3:0","tags":["算法"],"title":"刷题学习5-java 哈希表学习-散列表","uri":"/lc_learning5/"},{"categories":["刷题学习"],"content":"各种操作的时间复杂度 访问 X 搜索（无哈希碰撞） O(1) 搜索（有哈希碰撞） O(K) 链表遍历时经过了k个元素 插入 O(1) 删除 O(1) ","date":"2021-10-08","objectID":"/lc_learning5/:4:0","tags":["算法"],"title":"刷题学习5-java 哈希表学习-散列表","uri":"/lc_learning5/"},{"categories":["刷题学习"],"content":"Java 哈希表的常用操作 创建哈希表 // 通过字符串数组创建哈希表 String[] hashTable = new String[4]; // 通过HashMap 库创建哈希表 HashMap\u003cInteger, String\u003e hashMap = new HashMap\u003c\u003e(); 添加 // 添加 hashTable[1] = \"张三\"; hashTable[2] = \"李四\"; hashTable[3] = \"王五\"; // 使用数组的方式将其输出 for(int i = 0; i\u003chashTable.length-1; i++){ System.out.println((i+1)+\"-\"+hashTable[i+1]); } hashMap.put(1, \"张三\"); hashMap.put(2, \"李四\"); hashMap.put(3, \"王五\"); System.out.println(hashMap.toString()); 删除 hashTable[1] = \"\"; for(int i = 0; i\u003chashTable.length-1; i++){ System.out.println((i+1)+\"-\"+hashTable[i+1]); } hashMap.remove(1); System.out.println(hashMap.toString()); 更新元素 hashTable[1] = \"赵四\"; for(int i = 0; i\u003chashTable.length-1; i++){ System.out.println((i+1)+\"-\"+hashTable[i+1]); } hashMap.put(1 , \"赵四\"); 获取元素 System.out.println(hashTable[2]); System.out.println(hashMap.get(2)); 检查key的值是否存在 System.out.println(hashMap.containsKey(3)); 哈希表的长度 System.out.println(hashTable.length);// 有一个内存位置为空，4 System.out.println(hashMap.size()); 哈希表是否还有元素 System.out.println(hashMap.isEmpty()); ","date":"2021-10-08","objectID":"/lc_learning5/:5:0","tags":["算法"],"title":"刷题学习5-java 哈希表学习-散列表","uri":"/lc_learning5/"},{"categories":["刷题学习"],"content":"leetcode 练习题 217 存在重复元素 Contains Duplicate 389 找不同 Find Difference 496 下一个最大元素 Next Great Element ","date":"2021-10-08","objectID":"/lc_learning5/:6:0","tags":["算法"],"title":"刷题学习5-java 哈希表学习-散列表","uri":"/lc_learning5/"},{"categories":["yoloV5"],"content":"parser 参数详解 --weights 初始化模型： 有yolov5m，yolov5s，yolov5x，yolov5l，如果为设置为空就是没有任何与训练模型 --config 训练配置文件：.yaml 文件，与预训练模型相对应。 --data 所使用的数据集的配置文件：.yaml 文件，训练自己的数据集是也需要编辑相应的yaml文件 --hyp 超参数配置文件： 学习率等 --epoch 训练轮数 --batch-size batchsize 大小 --img-size 图片大小 --rect padding之后会有灰色区域的冗余信息，此参数设置为真，可以去除冗余信息 --resume 从之前训练的节点开始训练（已经训练的网络在runs/train/exp文件夹下的pt文件） 发现从此pt权重文件开始继续训练 --nosave 是否只保留最后一个epoch的权重文件 --notest 是否只测试最后一个epoch --noautoanchor （目标检测算法中是否使用锚点、锚框）关闭autoanchor --evolve 进化超参数（寻找最优参数的一种方式） --bucket 没有必要 --cache-images 缓存图片以备更快的训练 --image-weights 上一轮中训练情况不好的图片，在下一轮中加一些相关的权重 --device 训练设备选择 选择cpu或者gpu --multi-scale 对图片的尺寸进行变化 --single-cls 训练的数据集是但类别还是多类别 --adam 优化方法使用adam 优化法 --sync-bn DDP参数 --local_rank DDP参数 --workers 最好设置成0，不然很容易出错 --poject 项目存储位置 --entity W\u0026B 训练可视化的库是否启用 --name 训练结果保存名字 --quad 开启之后在尺寸大于640的图像上识别效果更好，但是有可能会使在640尺寸的图片上效果更差 --Linear-lr 学习速率的变化，如果开启就使用线性的方式进行变化，不开启就使用余弦退火的方式变化 --label-smoothing 防止在分了算法中出现过拟合的情况发生 --save_log 每隔多少个epoch，在tensorboard 中打一个标签 ","date":"2021-10-02","objectID":"/yolov5_train/:1:0","tags":["yoloV5","python","pytorch"],"title":"2-YoloV5 train.py 如何使用","uri":"/yolov5_train/"},{"categories":["kinova"],"content":"安全使用 不要进行剪裁操作，尖锐物体可能会上伤到手臂 关闭的时候会泄力，注意提前用手拖着 关节移动的时候不要限位 ","date":"2021-09-28","objectID":"/kinova_gen2learning2/:1:0","tags":["ROS","kinova"],"title":"2-kinova-gen2 使用学习","uri":"/kinova_gen2learning2/"},{"categories":["kinova"],"content":"部件 手臂主体部件 背面接口部件 USB、网线接口：公kinova SDK 控制使用 switch：开关 8pin口：摇杆控制 4pin口：电源线 ","date":"2021-09-28","objectID":"/kinova_gen2learning2/:2:0","tags":["ROS","kinova"],"title":"2-kinova-gen2 使用学习","uri":"/kinova_gen2learning2/"},{"categories":["kinova"],"content":"控制机械臂 ","date":"2021-09-28","objectID":"/kinova_gen2learning2/:3:0","tags":["ROS","kinova"],"title":"2-kinova-gen2 使用学习","uri":"/kinova_gen2learning2/"},{"categories":["kinova"],"content":"手柄控制 两种控制模式：Cartesian velocity（默认）、Angular velocity 手柄结构： 手柄按键指示表： ","date":"2021-09-28","objectID":"/kinova_gen2learning2/:3:1","tags":["ROS","kinova"],"title":"2-kinova-gen2 使用学习","uri":"/kinova_gen2learning2/"},{"categories":["kinova"],"content":"ROS 控制 具体访问https://github.com/Kinovarobotics/kinova-ros 选择对应ros版本的branch，然后进行安装 ","date":"2021-09-28","objectID":"/kinova_gen2learning2/:3:2","tags":["ROS","kinova"],"title":"2-kinova-gen2 使用学习","uri":"/kinova_gen2learning2/"},{"categories":["kinova"],"content":"3 SDK 控制 C++ library ","date":"2021-09-28","objectID":"/kinova_gen2learning2/:3:3","tags":["ROS","kinova"],"title":"2-kinova-gen2 使用学习","uri":"/kinova_gen2learning2/"},{"categories":["yoloV5"],"content":"pycharm 文件目录展开折叠管理 打开已打开文件的目录 展开所有目录 折叠所有目录 ","date":"2021-09-25","objectID":"/yolov5_macair/:1:0","tags":["m1 mac","yoloV5","python","pytorch"],"title":"1-yoloV5 本地训练 - m1 Mac Air（仅仅是为了调通代码）","uri":"/yolov5_macair/"},{"categories":["yoloV5"],"content":"number of workers 设置 此项为dataloader的载入数据的线程数量 初始运行的时候最好设置成0，由于不同机器的性能不同，数目大了很容易出问题 ","date":"2021-09-25","objectID":"/yolov5_macair/:2:0","tags":["m1 mac","yoloV5","python","pytorch"],"title":"1-yoloV5 本地训练 - m1 Mac Air（仅仅是为了调通代码）","uri":"/yolov5_macair/"},{"categories":["yoloV5"],"content":"导入nnpack 错误，m1 Mac 硬件不支持 在运行detect.py文件时同样报错，应该没有影响 ","date":"2021-09-25","objectID":"/yolov5_macair/:3:0","tags":["m1 mac","yoloV5","python","pytorch"],"title":"1-yoloV5 本地训练 - m1 Mac Air（仅仅是为了调通代码）","uri":"/yolov5_macair/"},{"categories":["yoloV5"],"content":"缺失coco 数据集错误 本地缺失coco128数据集 但是联网之后无法在该网址下载coco128 所有复制链接手动下载 最后复制到指定文件夹 完成后问题解决 开始训练 ","date":"2021-09-25","objectID":"/yolov5_macair/:4:0","tags":["m1 mac","yoloV5","python","pytorch"],"title":"1-yoloV5 本地训练 - m1 Mac Air（仅仅是为了调通代码）","uri":"/yolov5_macair/"},{"categories":["刷题学习"],"content":"问号 ？冒号 ：条件语句 int i = 0; int x = i\u003e1 ? 0:1; 问号冒号将其分为代码分为三个部分A、B、C A？B：C 如果A为真则执行B，如果为假则执行C ","date":"2021-09-23","objectID":"/lc_learning4/:1:0","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"字符串charAt 函数 String 类型的变量使用 指定index，返回该位置上的字符，返回类型为char类型 ","date":"2021-09-23","objectID":"/lc_learning4/:2:0","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"String 和 StringBuilder 的使用 ","date":"2021-09-23","objectID":"/lc_learning4/:3:0","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"初始化 StringBuilder str = new StringBuilder(); ","date":"2021-09-23","objectID":"/lc_learning4/:3:1","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"增加元素 str.append(1); str.append('a'); str.append(1.2); System.out.println(str.toString()); ","date":"2021-09-23","objectID":"/lc_learning4/:3:2","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"指定位置增加 str.insert(2, 's'); System.out.println(str.toString()); ","date":"2021-09-23","objectID":"/lc_learning4/:3:3","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"返回指定位置子序列 System.out.println(str.subSequence(0, 3)); ","date":"2021-09-23","objectID":"/lc_learning4/:3:4","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"搜索元素 System.out.println(str.indexOf(\"as\")); ","date":"2021-09-23","objectID":"/lc_learning4/:3:5","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"是否为空 System.out.println(str.isEmpty()); ","date":"2021-09-23","objectID":"/lc_learning4/:3:6","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"leetcode 题目强化 剑指offer 2 字符串二进制加法 ","date":"2021-09-23","objectID":"/lc_learning4/:4:0","tags":["算法"],"title":"刷题学习4-java 零碎基础知识","uri":"/lc_learning4/"},{"categories":["刷题学习"],"content":"特点 先进后出，与队列这种数据结构相反，队列是先进先出。 实用例子： 浏览器后退功能 ","date":"2021-09-20","objectID":"/lc_learning3/:1:0","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"操作的时间复杂度 访问栈顶元素 O(1) 搜索 O(N) 插入 O(1) 入栈 删除 O(1) 出栈 ","date":"2021-09-20","objectID":"/lc_learning3/:2:0","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"Java栈的常用操作 ","date":"2021-09-20","objectID":"/lc_learning3/:3:0","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"创建栈 Stack\u003cInteger\u003e stack = new Stack\u003c\u003e(); ","date":"2021-09-20","objectID":"/lc_learning3/:3:1","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"添加元素 stack.push(1); stack.push(2); stack.push(3); System.out.println(stack.toString()); ","date":"2021-09-20","objectID":"/lc_learning3/:3:2","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"查看栈顶元素 - 即将出栈的元素 int num = stack.peek(); ","date":"2021-09-20","objectID":"/lc_learning3/:3:3","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"删除栈顶元素 - 即将出栈的元素 int temp = stack.pop(); System.out.println(temp); ","date":"2021-09-20","objectID":"/lc_learning3/:3:4","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"返回栈的长度 System.out.println(stack.size()); ","date":"2021-09-20","objectID":"/lc_learning3/:3:5","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"栈是否为空 System.out.println(\"is empty: \"+stack.isEmpty()); ","date":"2021-09-20","objectID":"/lc_learning3/:3:6","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"遍历栈 while (!stack.isEmpty()){ System.out.println(stack.pop()); } ","date":"2021-09-20","objectID":"/lc_learning3/:3:7","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"leetcode 练习题 20 valid Parentheses 有效的括号 496 Next Great Element 下一个最大的元素 ","date":"2021-09-20","objectID":"/lc_learning3/:4:0","tags":["算法"],"title":"刷题学习3-java 栈学习","uri":"/lc_learning3/"},{"categories":["刷题学习"],"content":"队列的基本特征 先进先出 单端队列–只有一个口可以进，一个口可以出 双端队列–两个口都可以进， 两个口都可以出 ","date":"2021-09-17","objectID":"/lc_learning2/:1:0","tags":["算法"],"title":"刷题学习2-java 队列学习","uri":"/lc_learning2/"},{"categories":["刷题学习"],"content":"队列数据结构的特点 访问O(N) 需要从头到尾遍历一遍 搜索O(N) 需要从头到尾遍历一遍 插入O(1) 插入只能在队尾插入，不需要遍历，所以时间复杂度为O(1) 删除O(1) 删除只能在队头删除，不需要遍历，所以时间复杂度为O(1) tips 队列的底层实现是链表 ","date":"2021-09-17","objectID":"/lc_learning2/:2:0","tags":["算法"],"title":"刷题学习2-java 队列学习","uri":"/lc_learning2/"},{"categories":["刷题学习"],"content":"队列的常见操作 创建队列 Queue\u003cInteger\u003e queue = new LinkedList\u003c\u003e(); 添加元素 for (int i = 0; i\u003c 3 ; i++){ queue.add(i+1); } System.out.println(queue.toString()); 获取即将出队的元素 peek() int temp1 = queue.peek(); System.out.println(temp1); 删除即将出队的元素 remove()、pop()、poll() int temp2 = queue.poll(); System.out.println(temp2); System.out.println(queue.toString()); 判断队列是不是为空 System.out.println(queue.isEmpty());//O(1) 队列长度 System.out.println(queue.size());//O(1) 遍历队列（边删除边遍历队列的操作） while (!queue.isEmpty()){ int temp = queue.poll(); System.out.println(temp); }//O(N) ","date":"2021-09-17","objectID":"/lc_learning2/:3:0","tags":["算法"],"title":"刷题学习2-java 队列学习","uri":"/lc_learning2/"},{"categories":["刷题学习"],"content":"leetcode 队列基础练习题 ","date":"2021-09-17","objectID":"/lc_learning2/:4:0","tags":["算法"],"title":"刷题学习2-java 队列学习","uri":"/lc_learning2/"},{"categories":["刷题学习"],"content":"933 最近的请求次数 number of Recent calls 参数使用： 类的成员变量-队列queue、ping函数中变量-temp保存即将出队的元素 构造函数中初始化queue为一个队列 调用ping时首先最新的t入队 while开始条件：队列不为空 查找即将出列元素到存入temp，如果t-temp大于3000，则出列 如果小于，不出列，停止循环，返回队列长度为最终结果 ","date":"2021-09-17","objectID":"/lc_learning2/:4:1","tags":["算法"],"title":"刷题学习2-java 队列学习","uri":"/lc_learning2/"},{"categories":["刷题学习"],"content":"239 滑动窗口最大值 ","date":"2021-09-17","objectID":"/lc_learning2/:4:2","tags":["算法"],"title":"刷题学习2-java 队列学习","uri":"/lc_learning2/"},{"categories":["刷题学习"],"content":"链表与数组的区别 数组的存放为连续的内存空间， 链表不需要，任意碎片式的内存空间都可以形成链表。 ","date":"2021-09-16","objectID":"/lc_learninglistnode/:1:0","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"链表的分类 双端链表：既有next指向下一个数据也有previous指向前一个数据，可以双向遍历。 单端链表：只有next指向下一个数据，只能单向遍历。 ","date":"2021-09-16","objectID":"/lc_learninglistnode/:2:0","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"链表的基本操作 访问—-O(N) 需要遍历，从头找到尾 搜索—-O(N) 需要遍历，从头找到尾 插入—-O(1) 直接需要插入的位置断开指针，使上一个的指针指向新的元素的位置，新元素的下一个指向原本的下一个元素 删除—-O(1) 断开删除元素前一个元素的next指向删除元素的next即可 ","date":"2021-09-16","objectID":"/lc_learninglistnode/:3:0","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"tips 这里的插入删除操作的时间复杂度实际上说的插入或删除这一个操作的时间复杂度。 实际上整个操作的时间复杂度是O(N)，因为需要先查找到元素，遍历到指定位置，再进行插入。 ","date":"2021-09-16","objectID":"/lc_learninglistnode/:3:1","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"应用场景 写多读少的场景 ","date":"2021-09-16","objectID":"/lc_learninglistnode/:4:0","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"java 链表的常见操作 创建链表 LinkedList\u003cInteger\u003e list_1 = new LinkedList\u003c\u003e(); 添加元素 for (int i = 0; i\u003c3 ;i++){ list_1.add(i+1); } System.out.println(list_1.toString()); list_1.add(2,99); System.out.println(list_1.toString()); 访问元素 System.out.println(list_1.get(2)); 查找元素 System.out.println(list_1.indexOf(99)); System.out.println(list_1.indexOf(88)); 删除元素 list_1.remove(2); System.out.println(list_1.toString()); 链表长度 System.out.println(list_1.size()); 更新元素 list_1.set(2, 88); System.out.println(list_1.toString()); ","date":"2021-09-16","objectID":"/lc_learninglistnode/:5:0","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"链表基础leetcode题目 ","date":"2021-09-16","objectID":"/lc_learninglistnode/:6:0","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"1 leetcode 203 删除指定元素 参数设置：head（移动节点）， prev（head的前一个），dummy（保存头节点，最后返回结果） 1 遍历整个链表，入口的条件是链表的头节点不为空（这样最后一个节点也可以遍历到） 2 如果碰到指定值，prev 指向head的下一个节点head移动一步 3 如果没有碰到指定值，prev指向head，head后移一步 4 最后返回头节点（需要有dummy存储头节点）， 最后返回 ","date":"2021-09-16","objectID":"/lc_learninglistnode/:6:1","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["刷题学习"],"content":"2 leetcode 206 反转链表 参数设置：head（移动节点）， hNext（head的后一个），dummy（保存头节点，最后返回结果），dNext（dummy的后一个节点） dNext = dummy.next; hNext = head.next; dummy.next = hNext; head.next = hNext.next; hNext.next = dNext; ","date":"2021-09-16","objectID":"/lc_learninglistnode/:6:2","tags":["算法"],"title":"刷题学习1.5-java 链表 知识点ListNode","uri":"/lc_learninglistnode/"},{"categories":["kinova"],"content":"注：此方法适用于系统不能通过自检，并自动启动的情况 ","date":"2021-09-14","objectID":"/kinova_launch1/:0:1","tags":["ROS","kinova"],"title":"1-Kinova MOVO 手动启动操作","uri":"/kinova_launch1/"},{"categories":["kinova"],"content":"手动启动bash roslaunch movo_bringup movo_system.launch ","date":"2021-09-14","objectID":"/kinova_launch1/:1:0","tags":["ROS","kinova"],"title":"1-Kinova MOVO 手动启动操作","uri":"/kinova_launch1/"},{"categories":["kinova"],"content":"运行tractor_node脚本，解决MOVO底盘问题 ./tractor_node ","date":"2021-09-14","objectID":"/kinova_launch1/:2:0","tags":["ROS","kinova"],"title":"1-Kinova MOVO 手动启动操作","uri":"/kinova_launch1/"},{"categories":["kinova"],"content":"直连MOVO进行joystick手柄操作 cd /home/movo/movo_ws roslaunch movo_remote_teleop movo_remote_teleop.launch ","date":"2021-09-14","objectID":"/kinova_launch1/:3:0","tags":["ROS","kinova"],"title":"1-Kinova MOVO 手动启动操作","uri":"/kinova_launch1/"},{"categories":["kinova"],"content":"手柄操作方式 操作方式图解，所有的操作除了手指操作，其他的都需要DeadMan按键激活操作 ","date":"2021-09-14","objectID":"/kinova_launch1/:4:0","tags":["ROS","kinova"],"title":"1-Kinova MOVO 手动启动操作","uri":"/kinova_launch1/"},{"categories":["kinova"],"content":"rviz 操作 进入rviz rviz 点击motion planning 中planning Query栏中状态更新，选中状态之后点击update Commands栏中先点击plan，再update ","date":"2021-09-14","objectID":"/kinova_launch1/:5:0","tags":["ROS","kinova"],"title":"1-Kinova MOVO 手动启动操作","uri":"/kinova_launch1/"},{"categories":["刷题学习"],"content":"时间复杂度 时间复杂度即为代码的执行次数量级 算法的执行时间与输入之间的关系 ","date":"2021-09-08","objectID":"/lc_learning/:1:0","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(1) 常量数量级的时间复杂度, 没有for循环和while循环 ","date":"2021-09-08","objectID":"/lc_learning/:1:1","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(N) 常量不看，其中total=0，return total为常量执行次数 只有一层循环，循环的执行次数为N ","date":"2021-09-08","objectID":"/lc_learning/:1:2","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(logN) 常量不看，其中i=1，return i 为常量执行次数 i=i*2的执行次数为log2(N)，舍去2，则最后结果为O(logN) ","date":"2021-09-08","objectID":"/lc_learning/:1:3","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(M+N) 同理常量次数不看 两个O(N)，一个执行M次，一个执行N次 组合之后变成O(M+N)， 实际上等同于O(N) ","date":"2021-09-08","objectID":"/lc_learning/:1:4","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(NlogN) 同理常量次数不看 N次执行次数的循环内嵌套了一个logN次执行次数的循环 总次数为二者相乘即为O(NlogN) ","date":"2021-09-08","objectID":"/lc_learning/:1:5","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(N2) N次执行次数的循环内嵌套了一个N次执行次数的循环 总次数为二者相乘即为O(N2) ","date":"2021-09-08","objectID":"/lc_learning/:1:6","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"时间复杂度的判断方式 首先看有没有循环，没有则为常量次数O(1) 如果有，首先判断每一次循环的执行次数 循环之间的嵌套使用相乘的方式，得出最终的时间复杂度 ","date":"2021-09-08","objectID":"/lc_learning/:1:7","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"各个时间复杂度之间的比较 O(1) \u003c O(logN) \u003c O(N) \u003c O(NlogN) \u003c O(N2) \u003c O(2N) \u003c O(N!) 二分查找：O(logN) 堆排序：O(NlogN) 冒泡排序：O(N2) 快速排序：O(N2) 选择排序：O(N2) 二叉树排序：O(N2) 插入排序：O(N2) ","date":"2021-09-08","objectID":"/lc_learning/:1:8","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"空间复杂度 算法的存储空间和算法的关系 占空间的都是声明出来的变量 ","date":"2021-09-08","objectID":"/lc_learning/:2:0","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(1) 存储的变量为常数数量级 total在初始化之后虽然在循环当中被重复赋值，但是始终只占用total的空间 所以存储的变量为常数数量级 ","date":"2021-09-08","objectID":"/lc_learning/:2:1","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"O(N) 存储的数量级为N，循环的次数 数组的内的数字在不断增多，不断开辟新的内存空间 ","date":"2021-09-08","objectID":"/lc_learning/:2:2","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"tip1 arrary = [] for num in nums: array.append(num) return arrary 空间占用分为堆空间和栈空间 在for循环中条件部分申明的变量 num 开辟的空间为栈空间 使用完毕就会释放 而其他变量使用的是堆空间，程序完成之后才会释放 ","date":"2021-09-08","objectID":"/lc_learning/:3:0","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["刷题学习"],"content":"tip2 递归的函数内本身的空间复杂度如果为O(1)， 则调用递归的空间复杂度为O(N) 递归的函数内本身的空间复杂度如果为O(N)， 则调用递归的空间复杂度为O(N2) ","date":"2021-09-08","objectID":"/lc_learning/:4:0","tags":["算法"],"title":"刷题学习1-时间和空间复杂度","uri":"/lc_learning/"},{"categories":["Latex"],"content":"算法加入 在tex 文件开头引用以下包： algorithm、algorithmics、algpseudocode、amsmath \\usepackage{algorithm} \\usepackage{algorithmicx} \\usepackage{algpseudocode} \\usepackage{amsmath} f 如果算法中包含输入输出模块，还应加入如下代码： \\renewcommand{\\algorithmicrequire}{\\textbf{Input:}} % Use Input in the format of Algorithm \\renewcommand{\\algorithmicensure}{\\textbf{Output:}} % Use Output in the format of Algorithm 算法主体 \\begin{algorithm}[thpb] \\caption{algorithm name} \\label{algorithmlabel} \\begin{algorithmic}[1] \\Require algorithm input \\Ensure algorithm output \\State algorithm content1; \\While{while loop} \\State algorithm content2;\\EndWhile \\\\ \\Return algorithm output. \\end{algorithmic} \\end{algorithm} 完成之后呈现为这种状态 注意： 在while之后不要忘记endwhile while内部的代码会自动缩近 ","date":"2021-09-08","objectID":"/latex_learning2/:1:0","tags":["Latex"],"title":"Latex 语法学习笔记2","uri":"/latex_learning2/"},{"categories":["Latex"],"content":"各种文件 .bib 存放参考文献 .tex 文献源码 .bst 参考文献风格，与.bib组合使用 .sty 风格文件 ","date":"2021-09-08","objectID":"/latex_learning2/:2:0","tags":["Latex"],"title":"Latex 语法学习笔记2","uri":"/latex_learning2/"},{"categories":["Latex"],"content":"overleaf 使用 overleaf 左下角为文章结构 方便快速定位到tex代码文件的位置 ","date":"2021-09-08","objectID":"/latex_learning1/:1:0","tags":["Latex"],"title":"Latex 语法学习笔记1","uri":"/latex_learning1/"},{"categories":["Latex"],"content":"图片的插入与引用 插入 \\begin{figure}[t] \\centering \\includegraphics[scale=0.25]{intro.png} \\caption{描述} \\label{pic-label} \\vspace{-0.4cm} \\end{figure} \\centering 放置位置剧中 \\includegraphics[scale=0.25]{intro.png} 图片名称（同一目录下）及大小 \\caption{描述}图片下方的描述 \\label{pic-label}图片的引用 引用 Fig. \\ref{pic-label} 此处的pic-label 即为图片插入时的图片引用 ","date":"2021-09-08","objectID":"/latex_learning1/:2:0","tags":["Latex"],"title":"Latex 语法学习笔记1","uri":"/latex_learning1/"},{"categories":["Latex"],"content":"文献的插入与引用 首先bib文件中加入此格式的代码 @article{cosio2004autonomous, title={Autonomous robot navigation using adaptive potential fields}, author={Cos{\\'\\i}o, F Arambula and Casta{\\~n}eda, MA Padilla}, journal={Mathematical and Computer Modelling}, volume={40}, number={9-10}, pages={1141--1156}, year={2004} } 在tex文件中加入对bib文件和bst文献的支持 \\bibliographystyle{IEEEtranS} \\bibliography{IEEEexample} 最后在tex文件中引用该文献， 此处引用label为 cosio2004autonomous ~\\cite{cosio2004autonomous} ","date":"2021-09-08","objectID":"/latex_learning1/:3:0","tags":["Latex"],"title":"Latex 语法学习笔记1","uri":"/latex_learning1/"}]